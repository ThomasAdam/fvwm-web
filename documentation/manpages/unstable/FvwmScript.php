<?php
//--------------------------------------------------------------------
//-  File          : documentation/manpages/template.php
//-  Project       : FVWM Home Page
//-  Programmer    : Uwe Pross
//--------------------------------------------------------------------

// This is an autogenerated file, use manpages2php to create it.

//--------------------------------------------------------------------
// this manpages should not appear in the navigation structure
// so we hide its contents from navgen
//--------------------------------------------------------------------
if(isset($navigation_check)) return;

$rel_path = "../../..";

//--------------------------------------------------------------------
// load some global definitions
//--------------------------------------------------------------------
include_once("$rel_path/definitions.inc");

//--------------------------------------------------------------------
// Site definitions
//--------------------------------------------------------------------
$title          = "FVWM - Man page - FvwmScript";
$heading        = "FVWM - Man page - FvwmScript";
$link_name      = "Man page";
$link_picture   = "pictures/icons/doc_manpages";
$parent_site    = "documentation";
$child_sites    = array();
$requested_file = basename(my_get_global("PHP_SELF", "SERVER"));
$this_site      = "manpages_unstable_FvwmScript";

//--------------------------------------------------------------------
// load the layout file
//--------------------------------------------------------------------
if(!isset($site_has_been_loaded)) {
	$site_has_been_loaded = "true";
	include_once(sec_filename($layout_file));
	exit();
}
?>

<?php decoration_window_start("Manual page for FvwmScript in unstable branch (2.5.17)"); ?>

<H1>FvwmScript</H1>
Section: FVWM Modules (1)<BR>Updated: 19 July 2006 (2.5.17)<BR><A HREF="#index">This page contents</A>
 - <a href="<?php echo conv_link_target('./');?>">Return to main index</A><HR>


<P>
<A NAME="lbAB">&nbsp;</A>
<H2>NAME</H2>

FvwmScript - module to build graphic user interface
<P>
<A NAME="lbAC">&nbsp;</A>
<H2>SYNOPSIS</H2>

FvwmScript must be spawned by Fvwm.
It will not work from the command line.
<P>
<A NAME="lbAD">&nbsp;</A>
<H2>DESCRIPTION</H2>

FvwmScript is a module which allows you to build many graphical
applications such as desktop accessories, button panel with pop up
menus, modal dialogs... At the startup, FvwmScript reads
the file which is specified on the command line. This file contains the script.
This script is not included in the configuration file of Fvwm.
<P>
An FvwmScript script is fully controllable by using the keyboard.
(Shift)-Tab circulates around the widgets, Return simulates a mouse
click, the arrows move the cursor or change the values of the
widget and Escape &quot;cancels&quot; for Menu and PopupMenu.
<P>
<A NAME="lbAE">&nbsp;</A>
<H2>INVOCATION</H2>

FvwmScript can be invoked by inserting the line `Module
FvwmScript name_of_script' in the .fvwm2rc file.
The file &quot;name_of_script&quot; can start with a slash, in which case, it's
a fully qualified path, and the file is read.
If &quot;name_of_script&quot; does not start with a slash, FvwmScript will look
in a few different places.
If  the   .fvwm2rc contained   the  command  line  `*FvwmScript: Path
path_of_the_script_directory', FvwmScript will try that directory.
If that doesn't work, FvwmScript tries the system configuration directory
and the user configuration directory as described under the &quot;Read&quot;
command in the fvwm man page.
<P>
The command to start FvwmScript can be placed on a line by itself,
if FvwmScript is to be spawned during
fvwm's initialization, or can be bound to a menu or mouse
button or keystroke to invoke it later.
<P>
<A NAME="lbAF">&nbsp;</A>
<H2>CONFIGURATION OPTIONS</H2>

The following commands can be used in the config file (see
<I><a href="<?php echo conv_link_target('./fvwm.php');?>">fvwm</a></I>(1),

section
<B>MODULE COMMANDS</B>

for details). They are used
only if the corresponding script commands are not used in the script.
<P>
<DL COMPACT>
<DT>*FvwmScript: DefaultFont <I>font</I><DD>
Specifies the default font to be used. If not specified with this command
or in the script with the Font command, fixed font is assumed.
<P>
<DT>*FvwmScript: DefaultFore <I>color</I><DD>
Specifies the default foreground color to be used. If not specified with
this command or in the script with the ForeColor command, black is used.
<P>
<DT>*FvwmScript: DefaultBack <I>color</I><DD>
Specifies the default background color to be used. If not specified with
this command or in the script with the BackColor command, grey85 is used.
<P>
<DT>*FvwmScript: DefaultHilight <I>color</I><DD>
Specifies the default hilight color to be used. If not specified with
this command or in the script with the HilightColor command, grey100 is used.
<P>
<DT>*FvwmScript: DefaultShadow <I>color</I><DD>
Specifies the default shadow color to be used. If not specified with this
command or in the script with the ShadowColor command, grey55 is used.
<P>
<DT>*FvwmScript: DefaultColorset <I>colorset</I><DD>
Tells the module to use colorset <I>colorset</I> as the default colorset.
Refer to the FvwmTheme man page for details about
colorsets.
<P>
</DL>
<A NAME="lbAG">&nbsp;</A>
<H2>ANATOMY OF A SCRIPT</H2>

FvwmScript uses a particular programming language. A script is composed of
five parts. Heading contains general characteristics of the window and
default properties for all widgets. The second part contains
instructions whom are executed at the  startup of the script. The third
part contains periodic tasks which are executed every second.
The fourth part contains instructions which are executed at exit.
And the last part contains the description of widgets.
A widget consists of eleven types of items: text labels, single-line
text inputs, radio buttons, checkbox, push buttons, horizontal and vertical
scrollbars, rectangles, pop up menus, swallowexecs and mini scrollbars.
<P>
<A NAME="lbAH">&nbsp;</A>
<H2>HEADING OF A SCRIPT</H2>

The syntax is as follows:
<P>
<DL COMPACT>
<DT>WindowTitle <I>string</I><DD>
This option sets the window title.
<P>
<DT>WindowSize <I>width height</I><DD>
This option sets window size. <I>width</I> and <I>height</I> are numerical value.
<P>
<DT>WindowPosition <I>x y</I><DD>
This option sets window position. <I>x</I> and <I>y</I> are numerical value.
<P>
<DT>ForeColor {<I>color</I>}<DD>
This option sets the default foreground color for all widgets.
<P>
<DT>BackColor {<I>color</I>}<DD>
This option sets the default background color for all widgets.
<P>
<DT>HilightColor {<I>color</I>}<DD>
This option sets the default hilight color for all widgets.
<P>
<DT>ShadowColor {<I>color</I>}<DD>
This option sets the default shadow color for all widgets.
<P>
<DT>Colorset {<I>n</I>}<DD>
This option sets the default colorset for all widgets.
<P>
<DT>Font {<I>font</I>}<DD>
This option sets the default font for all widgets.
<P>
<DT>UseGettext  [<I>locale_path</I>]<DD>
Enable the use of the gettext mechanism which is used by the
WindowLocaleTitle, LocaleTitle, ChangeLocaleTitle instructions and
the Gettext function.
If no argument is given, the default FvwmScript locale catalog is used.
This catalog is under the locale fvwm installation directory and the text
domain is FvwmScript (install_prefix/share/locale/*/LC_MESSAGES/FvwmScript.mo).
You can reset this catalog or add some catalogs exactly in the same way
than with the
<B>LocalePath</B>

fvwm command (see the fvwm manual page).
This instruction should be placed before the WindowLocaleTitle
instruction.
<P>
<DT>WindowLocaleTitle <I>string</I><DD>
This option sets the window title, but use the locale catalog(s) defined
with UseGettext.
<P>
</DL>
<A NAME="lbAI">&nbsp;</A>
<H2>INITIALISATION</H2>

This part contains instructions which will be executed at the startup.
For example:


<P>


<blockquote><PRE>Init
 Begin
  Do &quot;Exec cat tada.voc &gt; /dev/dsp&quot;
  WarpPointer 1
  Set $ToDo=Restart
 End</PRE></blockquote>
<P>



These instructions are used to play a sound, move the pointer
to widget 1 and to initialize $ToDo to &quot;Restart&quot; at every startup.
<P>
<A NAME="lbAJ">&nbsp;</A>
<H2>PERIODIC TASKS</H2>

This part of the script contains instructions that are executed every
second.  For example:


<P>


<blockquote><PRE>PeriodicTasks
 Begin
  If (RemainderOfDiv (GetTime) 10)==0 Then
   Do {Exec xcalc}
 End</PRE></blockquote>
<P>



This example shows how to launch xcalc every 10 seconds.
<P>
<A NAME="lbAK">&nbsp;</A>
<H2>THE QUIT FUNCTION</H2>

This part of the script contains instructions that are executed when
the script exits (after the Quit instruction or if you close the window with
the Close, Delete or Destroy fvwm command). For Example


<P>


<blockquote><PRE>QuitFunc
 Begin
  Do {Echo bye, bye}
 End</PRE></blockquote>
<P>



Be aware that if you used the KillModule fvwm command to close the script,
some instructions or functions which rely on the existence of a
communication link between the script and fvwm will not be executed
(for example the Do command). To smoothly kill a script with an fvwm command
see the
<B>COMMANDS</B>

section.
<P>
<A NAME="lbAL">&nbsp;</A>
<H2>MAIN OF A SCRIPT</H2>

The second part of the script contains the description for every widget
in the script.
Each widget description has two parts.
The first part describes initial properties,
the second part contains instructions that are executed
when the widget receives messages.
All widgets can send and receive messages.
All messages are identified by a number.
The message &quot;UserAction&quot; is sent to a widget when the user operates the widget.
The syntax for the first part is:


<P>


<blockquote><PRE>Widget      id # A number between 1 and 999 inclusive
Property
 Type    string
 Size width height
 Position   x y
 Title      { string }
 Value      int
 MaxValue   int
 MinValue   int
 Font    string
 ForeColor  { color }
 BackColor  { color }
 HilightColor  { color }
 ShadowColor   { color }
 Colorset   int
 Flags      flagsOpt</PRE></blockquote>
<P>



The flagsOpt option to Flags is a space separated list containing one or
more  of  the  keywords
<I>Hidden</I>,

<I>NoReliefString</I>,

<I>NoFocus</I>,

<I>Left</I> / <I>Center</I> / <I>Right</I>.

<I>Hidden</I>

is used to specify if the widget is hidden at startup.
<I>NoReliefString</I>

specifies if strings are drawn with relief or not.
<I>NoFocus</I>

specifies if the widget can get the keyboard focus or not.
By default all widgets take focus, except Rectangle, HDipstick and VDipstick
which cannot. Moreover, the NoFocus widgets are skipped when you
circulate around the widgets with the (Shift-)Tab short cut.
<I>Left</I> / <I>Center</I> / <I>Right</I>

specifies the text position. These apply only to ItemDraw, List, Menu,
PopupMenu and PushButton. The default is
<I>Center</I>

for ItemDraw and PushButton and
<I>Left</I>

for the other widgets.
<P>
LocaleTitle can be used in place of Title, for using the locale catalog(s)
defined with UseGettext.
<P>
The position of every widget must be specified.
<P>
The syntax for the second part is:


<P>


<blockquote><PRE>Main
 Case message of
  SingleClic:
  Begin
   # list of instructions which will be
   # executed when widget receives
   # message &quot;SingleClic&quot;. This message is
   # generated by the user.
  End
  1 :
  Begin
   # list of instructions which will be
   # executed when widget receives
   # message 1
  End
 End</PRE></blockquote>
<P>



<P>
<A NAME="lbAM">&nbsp;</A>
<H2>LIST OF WIDGETS</H2>

There is fifteen types of widgets.
<P>
<DL COMPACT>
<DT><B>CheckBox</B>: Display check box with a string.<DD>
<P>
<B>Title</B>: title of the check box.
<P>
<B>Value</B>: if Value is equal to 1, the box is checked else it is not.
<P>
The <B>Size</B> property is ignored.
<P>
<DT><B>HDipstick</B>: Display a horizontal dipstick.<DD>
This widget can be used to display disk usage.
<P>
<B>Value</B>: specify the current value of the dipstick.
<P>
<B>MinValue</B>: specify the minimum value of the dipstick.
<P>
<B>MaxValue</B>: specify the maximum value of the dipstick.
<P>
A minimum size of 30x11 is imposed.
<P>
<DT><B>HScrollBar</B>: Display an horizontal scrollbar.<DD>
<P>
<B>Value</B>: position of the thumb.
<P>
<B>MaxValue</B>: upper limit of Value.
<P>
<B>MinValue</B>: lower limit of Value.
<P>
The height property is ignored and a minimum width is imposed.  The width
should be at least the range plus 37 if all values are to be selectable e.g.
a min of 0 and max of 10 has a range of 11 and therefore should have a
minimum width of 48.
<P>
<DT><B>ItemDraw</B>: Display an icon and/or a string.<DD>
<P>
<B>Title</B>: string to display.
<P>
<B>Icon</B>: icon to display.
<P>
<B>MaxValue</B>: x coordinate of the cursor.
<P>
<B>MinValue</B>: y coordinate of the cursor.
<P>
The size is made large enough to contain the title and/or the icon.
<P>
<DT><B>List</B>: Display a list.<DD>
List lets user to choose between various options.
<P>
<B>Value</B>: specify which option is selected.
<P>
<B>MinValue</B>: First visible option.
<P>
<B>Title</B>: title contains options displayed in the list. The syntax is the
following: {Option 1|Option 2|...|Option N}. All menus are displayed at the top
of window.
<P>
A minimum height of three items is imposed and the width is made to be at
least 108.
<P>
<DT><B>Menu</B>: Display a menu whom lets user to choose a option.<DD>
Items of type Menu are layed out from left to right along the top
of the window. The size and position properties are ignored.
<P>
<B>Value</B>: specify which option is selected.
<P>
<B>Title</B>: title contains options displayed in the menu. The syntax is the
following:
{Option 1|Option 2|...|Option N}.
<P>
<DT><B>MiniScroll</B>: Display a very small vertical scrollbar.<DD>
<P>
<B>Value</B>: position of the thumb.
<P>
<B>MaxValue</B>: upper limit of Value.
<P>
<B>MinValue</B>: lower limit of Value.
<P>
The size is set to 19x34.
<P>
<DT><B>PopupMenu</B>: Display a pop up menu.<DD>
<P>
<B>Value</B>: specify what option is selected.
<P>
<B>Title</B>: the title has the following syntax:
{Option 1|Option 2|...|Option N}.&quot;Option 1|Option 2|...|Option N&quot; is the
pop up menu which is displayed when pressing mouse button.
<P>
The size property is ignored.
<P>
<DT><B>PushButton</B>: Display push button with an icon and/or a string.<DD>
<P>
<B>Title</B>: this string has the following syntax {Title of the button|Option
1|Option 2|Option3|...|Option N}. &quot;Option 1|Option 2|...|Option N&quot; is the
pop up menu which is displayed when pressing the right button.
<P>
<B>Icon</B>: icon to display.
<P>
The button is made large enough to fit the icon and or label.
<P>
<DT><B>RadioButton</B>: Display radio button with a string.<DD>
<P>
<B>Title</B>: title of the radio button.
<P>
<B>Value</B>: if Value is equal to 1, the box is checked else it is not.
<P>
The size property is ignored
<P>
<DT><B>Rectangle</B>: Display a rectangle.<DD>
<BR>&nbsp;This&nbsp;type&nbsp;of&nbsp;widget&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;decorate&nbsp;window.
<P>
<DT><B>SwallowExec</B><DD>
This type of widget causes FvwmScript to spawn an process, and capture the
first window whose name or resource is equal to Title, and display it in
the script window.
<P>
<B>Title</B>: specify the window name which be captured and displayed in the
script window.
<P>
<B>SwallowExec</B>: specify the command line to execute to spawn the process.
Modules can also be swallowed.
<P>
<B>Value</B>: specify the looking of the border. Possible value: -1, 0, 1.
<P>
The size is made to be at least 30x30
<P>
<DT><B>TextField</B>: Display a text input field.<DD>
The text input field can be used to edit a single-line string.
<P>
<B>Title</B>: content of text field.
<P>
<B>Value</B>: position of the insert point.
<P>
<B>MinValue</B>: position of the end of the selection.
<P>
<B>MaxValue</B>: first visible character of the title
<P>
The height property is ignored, the width is made to be at least 40 pixels
wider than the initial contents.
<P>
<DT><B>VDipstick</B>: Display a vertical dipstick.<DD>
<P>
<B>Value</B>: specify the current value of the dipstick.
<P>
<B>MinValue</B>: specify the minimum value of the dipstick.
<P>
<B>MaxValue</B>: specify the maximum value of the dipstick.
<P>
The size is made to be at least 11x30.
<P>
<DT><B>VScrollBar</B>: Display a vertical scrollbar.<DD>
<P>
<B>Value</B>: position of the thumb.
<P>
<B>MaxValue</B>: upper limit of Value.
<P>
<B>MinValue</B>: lower limit of Value.
<P>
The width property is ignored and a minimum height is imposed.  The height
should be at least the range plus 37 if all values are to be selectable e.g.
a min of 0 and max of 10 has a range of 11 and therefore should have a
minimum height of 48.
<P>
</DL>
<A NAME="lbAN">&nbsp;</A>
<H2>INSTRUCTIONS</H2>

<P>
Here is the description of all instructions.
<P>
<DL COMPACT>
<DT>HideWidget <I>id</I> : hide the widget numbered <I>id</I>.<DD>
<P>
<DT>ShowWidget <I>id</I>: show the widget numbered <I>id</I>.<DD>
<P>
<DT>ChangeValue <I>id1 id2</I><DD>
Set the value of the widget numbered <I>id1</I> to <I>id2</I>.
<P>
<DT>ChangeMaxValue <I>id1 id2</I><DD>
Set the maximum value of the widget numbered <I>id1</I> to <I>id2</I>.
<P>
<DT>ChangeMinValue <I>id1 id2</I><DD>
Set the minimum value of the widget numbered <I>id1</I> to <I>id2</I>.
<P>
<DT>ChangeTitle <I>id1 id2</I><DD>
Set the title of the widget numbered <I>id1</I> to <I>id2</I>.
<P>
<DT>ChangeLocaleTitle <I>id1 id2</I><DD>
As ChangeTitle but use the locale catalog(s) defined with UseGettext.
<P>
<DT>ChangeIcon <I>id1 id2</I><DD>
Set the icon of the widget numbered <I>id1</I> to <I>id2</I>.
<P>
<DT>ChangeForeColor <I>id1</I> {<I>color</I>}<DD>
Set the foreground color of the widget numbered <I>id1</I> to {<I>color</I>}.
<P>
<DT>ChangeBackColor <I>id1</I> {<I>color</I>}<DD>
Set the background color of the widget numbered <I>id1</I> to {<I>color</I>}.
<P>
<DT>ChangeColorSet <I>id1</I> <I>id2</I><DD>
Set the colorset of the widget numbered <I>id1</I> to <I>id2</I>. Specifying
widget 0 sets the main window colorset.
<P>
<DT>ChangePosition <I>id1 x y</I><DD>
Move the widget numbered <I>id1</I> to position (<I>x</I>,<I>y</I>).
<P>
<DT>ChangeSize <I>id1 width height</I><DD>
Set the size of the widget numbered <I>id1</I> to (<I>width</I>,<I>height</I>).
<P>
<DT>ChangeFont <I>id1 newfont</I><DD>
Set the font of the widget numbered <I>id1</I> to <I>newfont</I>.
<P>
<DT>WarpPointer <I>id</I><DD>
Warp the mouse pointer into the widget numbered <I>id</I>.
<P>
<DT>WriteToFile <I>filename</I> {<I>str1</I>} {<I>str2</I>} etc<DD>
Write to the file <I>filename</I> the string which is the concatenation of all
arguments <I>str1</I>, <I>str2</I>, etc.
<P>
<DT>Do {<I>command args</I>}<DD>
Execute the fvwm command inside the Do block.
Any fvwm command as described in the fvwm2
man page can be used.
Commands are sent from this module to the fvwm
main program for processing.
The length of the command and arguments can not exceed 988 characters.
<P>
<DT>Set $<I>var</I>={<I>str</I>1} {<I>str2</I>} etc<DD>
Concatenate all arguments to a string and set the variable $<I>var</I> to this
string.
<P>
<DT>Quit: quit the program.<DD>
<P>
<DT>SendSignal <I>id1 id2</I><DD>
Send a message numbered <I>id2</I> to widget <I>id1</I>.
<P>
<DT>SendToScript <I>id_script</I> {<I>str1</I>1} {<I>str2</I>} etc<DD>
Send a message to the script identified by id_script. The message is the
concatenation of str1, str2...
<P>
<DT>Key <I>Keyname</I> <I>Modifier</I> <I>id</I> <I>sig</I> <I>str1</I> <I>str2</I> etc

<DD>
Binds a keyboard key to the instruction
<P>
SendSignal <I>id</I> <I>sig</I>

<P>
and sets the &quot;last string&quot; to the concatenation of str1, str2...
(see the LastString function).
The
<I>Keyname</I>

and
<I>Modifiers</I>

fields are defined as in the fvwm Key command.
<P>
</DL>
<A NAME="lbAO">&nbsp;</A>
<H2>ARGUMENTS</H2>

Most of commands use arguments. There are two kinds of arguments: numbers and
strings.
A numerical argument is a value which is between -32000 and +32000. A string is
always surrounded with braces. Variables always begin with the character &quot;$&quot; and
can contain both numbers and strings.
<P>
<A NAME="lbAP">&nbsp;</A>
<H2>FUNCTIONS</H2>

All functions use arguments. Functions can return both a string and
a number.  The syntax is:


<P>


<blockquote><PRE>(function argument1 argument2 etc)</PRE></blockquote>
<P>



Here is the complete list of arguments:
<P>
<DL COMPACT>
<DT>(GetTitle <I>id</I>)<DD>
Return the title of the widget numbered <I>id</I>.
<P>
<DT>(GetValue <I>id</I>)<DD>
Return the current value of the widget numbered <I>id</I>.
<P>
<DT>(GetMinValue <I>id</I>)<DD>
Return the current Min value of the widget numbered <I>id</I>.
<P>
<DT>(GetMaxValue <I>id</I>)<DD>
Return the current Max value of the widget numbered <I>id</I>.
<P>
<DT>(GetFore <I>id</I>)<DD>
Return the current RGB foreground value of the widget numbered <I>id</I> in the
hex format RRGGBB.
<P>
<DT>(GetBack <I>id</I>)<DD>
Return the current RGB background value of the widget numbered <I>id</I> in the
hex format RRGGBB.
<P>
<DT>(GetHilight <I>id</I>)<DD>
Return the current RGB hilight value of the widget numbered <I>id</I> in the
hex format RRGGBB.
<P>
<DT>(GetShadow <I>id</I>)<DD>
Return the current RGB shadow value of the widget numbered <I>id</I> in the
hex format RRGGBB.
<P>
<DT>(GetOutput {<I>str</I>} <I>int1 int2</I>)<DD>
Executes the command <I>str</I>, gets the standard output and returns the word
which is in the line <I>int1</I> and in the position <I>int2</I>. If <I>int2</I>
is equal to -1, GetOutput returns the complete line.
<P>
<DT>(NumToHex <I>int</I>)<DD>
Return the hexadecimal value of <I>int</I>.
<P>
<DT>(HexToNum {<I>str</I>})<DD>
Return the decimal value of <I>str</I>, <I>str</I> must be an hexadecimal value.
<P>
<DT>(Add <I>int1 int2</I>)<DD>
Return the result of (<I>int1</I>+<I>int2</I>).
<P>
<DT>(Mult <I>int1 int2</I>)<DD>
Return the result of (<I>int1</I>*<I>int2</I>).
<P>
<DT>(Div <I>int1 int2</I>)<DD>
Return the result of (<I>int1</I>/<I>int2</I>).
<P>
<DT>(StrCopy {<I>str</I>} <I>int1 int2</I>)<DD>
Return the string whom is between position int1 and int2. For example,
(StrCopy {Hello} 1 2) returns {He}
<P>
<DT>(LaunchScript {<I>str</I>})<DD>
This function launches the script named str and returns
an identification number.
This number is necessary to use the functions SendToScript and
ReceiveFromScript. The string str contains the script name and some arguments.
<P>
<DT>(GetScriptArgument {<I>int</I>})<DD>
This function returns the argument script used in the function LaunchScript.
If int is equal to zero, GetScriptArgument returns the name of the script.
<P>
<DT>(GetScriptFather)<DD>
This function returns the identification number of the script father.
<P>
<DT>(ReceivFromScript {<I>int</I>})<DD>
This function returns the message sent by the script numbered int.
<P>
<DT>(RemainderOfDiv {<I>int1 int2</I>}): t<DD>
This function returns the remainder of the division (<I>int1</I>/<I>int2</I>).
<P>
<DT>(GetTime)<DD>
This function returns the time in seconds.
<P>
<DT>(GetPid)

<DD>
This function returns the process id of the script.
<P>
<DT>(Gettext {<I>str</I>})

<DD>
This function return the translation of
<I>str</I>

by using the locale catalog(s) defined with UseGettext.
<P>
<DT>(SendMsgAndGet {<I>comId</I>} {<I>cmd</I>} <I>bool</I>)

<DD>
Sends the command
<I>cmd</I>

with identifier
<I>comId</I>

to an external
program ready to communicate with the script using a protocol
specific to FvwmScript. If
<I>bool</I>

is 0 FvwmScript does not wait for an
answer from the external program. In this case the returned value is 1 if
the message can be sent to the external program and 0 if this is not the case.
If
<I>bool</I>

is 1, then FvwmScript waits for an answer from the external program
and the return value is this answer (a line of no more
than 32000 characters). If the communication fails, the returned value is 0.
See the section
<B>A COMMUNICATION PROTOCOL</B>

for a description of the communication protocol used.
<P>
<DT>(Parse {<I>str</I>} <I>int</I>)

<DD>
where
<I>str</I>

must be a string of the form:


<P>


<blockquote><PRE>   X1S1X2S2X3S3...SnXn</PRE></blockquote>
<P>



where the Xn are numbers containing four decimal digits and where
Sn are strings of length exactly Xn. The returned value is the
string
S<I>int</I>.

If
<I>int</I>

is out of range (e.g., &gt;n) the returned value is the empty string. If
<I>str</I>

is not of the specified form, the return value is unpredictable
(but empty in the average). This function is useful to handle
strings returned by the SendMsgAndGet function.
<P>
<DT>(LastString)

<DD>
This function returns the &quot;current working string&quot; for the Key instruction
and the SendString command
(see the
<B>COMMANDS</B>

section). At startup this string is empty, but when a Key binding is
detected (respectively, a SendString command is received), then this string
is set to the string associated to the instruction (respectively,
to the command).
<P>
</DL>
<A NAME="lbAQ">&nbsp;</A>
<H2>CONDITIONAL LOOPS</H2>

There are three kinds of conditional loops. The instruction &quot;If-Then-Else&quot;
has the following syntax:


<P>


<blockquote><PRE>If $ToDo=={Open xcalc} Then
 Do {Exec xcalc &amp;}  # List of instructions
Else
Begin
 Do {Exec killall xcalc &amp;} # List of instructions
 Do {Exec echo xcalc killed &gt; /dev/console}
End</PRE></blockquote>
<P>



The second part &quot;Else-Begin-End&quot; is optional. If the loop contains only one
instruction, Begin and End can be omitted. The instruction &quot;While-Do&quot; has the
following syntax:


<P>


<blockquote><PRE>While $i&lt;5 Do
Begin
 Set $i=(Add i 1)  # List of instructions
End</PRE></blockquote>
<P>



Two strings can be compared with &quot;==&quot; and two numbers can be compared with &quot;&lt;&quot;,
&quot;&lt;=&quot;, &quot;==&quot;, &quot;&gt;=&quot;, &quot;&gt;&quot;. The loop &quot;For-Do-Begin-End&quot; has the following syntax:


<P>


<blockquote><PRE>For $i=1 To 20 Do
Begin
 Do {Exec xcalc &amp;}# List of instructions
End</PRE></blockquote>
<P>



<P>
<A NAME="lbAR">&nbsp;</A>
<H2>COMMANDS</H2>

The following FVWM command may be executed at any time
<P>
SendToModule <I>ScriptName</I> SendString <I>id</I> <I>sig</I> <I>str</I>

<P>
it sends to any module with alias or name which matches
<I>ScriptName</I>

the string
<P>
SendString <I>id</I> <I>sig</I> <I>str</I>

<P>
When an FvwmScript receives such a message it sends to the Widget
<I>id</I>

the signal numbered
<I>sig</I>

and the string
<I>str</I>

can be obtained with the LastString function. Let us give an example.
Say that you have a script MyScript with the widget:


<P>


<blockquote><PRE>Widget 50
Property
 Type PushButton
 Title {Quit}
 ...
Main
Case message of

  SingleClic:
  Begin
    Quit
  End

  1 :
  Begin
    Set $str = (LastString)
    If $str == {Quit} Then
      Quit
    Else
      ChangeTitle 33 $str
  End

End</PRE></blockquote>
<P>



Then the command


<P>


<blockquote><PRE>SendToModule MyScript SendString 50 1 str</PRE></blockquote>
<P>



forces MyScript to exit if str is equal to &quot;Quit&quot; and if not it changes
the title of Widget 33 to str.
<P>
<A NAME="lbAS">&nbsp;</A>
<H2>EXAMPLES</H2>

You will find examples of scripts in the fvwm configuration directory.
<P>
FvwmScript-BellSetup, FvwmScript-KeyboardSetup, FvwmScript-PointerSetup and
FvwmScript-ScreenSetup are a set of scripts that modify X settings.
These scripts save preferences into a file named ~/.xinit-fvwmrc (If you want
to use another file name, give it as the first argument of the script).
If you want to load these preferences at every startup, you have to include
the line  &quot;.xinit-fvwmrc&quot; in your .xinitrc (or .xsession) file before
starting fvwm.
<P>
FvwmScript-BaseConfig modifies fvwm
focus and paging mouse policy, window placement, opacity and
other features of the move and resize commands, snap attraction and
shading animation.
This script saves preferences into a file named .FvwmBaseConfig in the
user's data directory (i.e., $HOME/.fvwm or $FVWM_USERDIR if set).
If you want to load these preferences at every startup you must add
the line &quot;Read .FvwmBaseConfig&quot; in your fvwm configuration file.
If you want to use another file name, give it as the first
argument of the script.
When you click on Ok or Apply an fvwm function that you may define
named BaseConfigOkFunc or BaseConfigApplyFunc is called.
This allows for reloading specific application styles
that the script has destroyed
(e.g., AddToFunc  BaseConfigOkFunc I Read MyAppStyle).
<P>
FvwmScript-Buttons is a buttons panel which can replace FvwmButtons (this
script supports popup menus and requires xload, xclock, FvwmPager, TkDesk).
FvwmScript-Colorset allows you to edit your colorset (see FvwmTheme).
FvwmScript-Date allows you to set date and time.
FvwmScript-FileBrowser is a file browser used by the other scripts.
FvwmScript-Find is an elementary front-end to find.
FvwmScript-Quit allows to quit fvwm, restart fvwm or some other window
manager, or shut down and reboot the computer.
FvwmScript-ScreenDump is a screen dumper. FvwmScript-WidgetDemo is a pure
example script. See the next section for FvwmScript-ComExample.
<P>
<A NAME="lbAT">&nbsp;</A>
<H2>A COMMUNICATION PROTOCOL</H2>

FvwmScript is a weak (but simple) programming language. If you need to
deal with a lot of data and/or you need to use complex algorithms you
should use an external program (in perl for example) and &quot;send&quot; the desired
information
to your FvwmScript script. The first approach is to use the GetOutput function.
This is simple but you should rerun your external program each time
you need information from it (and this may cause performances problems).
The second approach is to use the SendMsgAndGet function which
extends FvwmScript by using any programming language which can deal with
named pipes (fifos). We describe this solution in this section.
(A third approach is to use fvwm-themes-com from the fvwm-themes
package, but in fact the SendMsgAndGet method is an implementation
of fvwm-themes-com inside FvwmScript and this gives better performance).
<P>
Basically, you start an &quot;external&quot; program (the program for short) from your
FvwmScript script (the script for short). This
program runs in the background and you use the SendMsgAndGet function
in your script to ask questions or to give instructions to the program.
The program must strictly respect a certain communication protocol.
First of all there is an identifier
<I>comId</I>

for the communication, it should contain the process id of the script
for a good implementation of the protocol (use the GetPid function and
pass the
<I>comId</I>

via an option to the program). The protocol uses two fifos, in the FVWM user
directory, named:
.tmp-com-in-<I>comId</I> and .tmp-com-out-<I>comId</I>.

The program should create and listen on the
.tmp-com-in-<I>comId</I>

fifo. Then, when FvwmScript executes a function of the form:
<P>
       Set $answer = (SendMsgAndGet {<I>comId</I>} {<I>cmd</I>} <I>bool</I>)

<P>
FvwmScript writes the
<I>cmd</I>

on this fifo.
This way the program can read the
<I>cmd</I>

and can execute the appropriate action (it should remove the in fifo
to support multi-communications). If
<I>bool</I>

is 0, FvwmScript does not wait for an answer from the program and
return 1 if the previous actions succeed and 0 if they failed
(then the program should &quot;go back&quot; to the in fifo).
If
<I>bool</I>

is 1, then FvwmScript waits (20 sec) for an answer from the program and
in turn returns the answer to the script (note that
<I>bool</I>

is not passed to the program as it must know which commands need
an answer). To answer, the program creates the
.tmp-com-out-<I>comId</I>

fifo and writes the answer on it. The program should wait until
FvwmScript reads the answer and then it should remove the out fifo
and go back to the in fifo. The answer should consist of
one line of no more than 32000 characters (take a look at the Parse
function to handle multiple lines as one line).
<P>
A simple way to understand this protocol and to write scripts and
programs that use it is to take a look at
the (not useful) example FvwmScript-ComExample and
fvwm-script-ComExample.pl (that can found in the FVWM data
directory). Moreover, this implementation of the protocol solves
questions as: What to do if the script exits for a bad reason?
What to do if the program exits for a bad reason? ...etc.
<P>
<A NAME="lbAU">&nbsp;</A>
<H2>BUGS</H2>

FvwmScript crashes if widgets are accessed that have not been defined.
<P>
<A NAME="lbAV">&nbsp;</A>
<H2>AUTHOR</H2>

<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Frederic&nbsp;Cordier&nbsp;(<A HREF="mailto:cordie97@cui.unige.ch">cordie97@cui.unige.ch</A>&nbsp;or&nbsp;<A HREF="mailto:f-cord96@univ-lyon1.fr">f-cord96@univ-lyon1.fr</A>).
<P>
<A NAME="lbAW">&nbsp;</A>
<H2>CONTRIBUTOR</H2>

<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Eddy&nbsp;J.&nbsp;Gurney&nbsp;(<A HREF="mailto:eddy@gizmo.aa.ans.net">eddy@gizmo.aa.ans.net</A>).
<P>

<HR>
<A NAME="index">&nbsp;</A><H2>Index</H2>
<DL>
<DT><A HREF="#lbAB">NAME</A><DD>
<DT><A HREF="#lbAC">SYNOPSIS</A><DD>
<DT><A HREF="#lbAD">DESCRIPTION</A><DD>
<DT><A HREF="#lbAE">INVOCATION</A><DD>
<DT><A HREF="#lbAF">CONFIGURATION OPTIONS</A><DD>
<DT><A HREF="#lbAG">ANATOMY OF A SCRIPT</A><DD>
<DT><A HREF="#lbAH">HEADING OF A SCRIPT</A><DD>
<DT><A HREF="#lbAI">INITIALISATION</A><DD>
<DT><A HREF="#lbAJ">PERIODIC TASKS</A><DD>
<DT><A HREF="#lbAK">THE QUIT FUNCTION</A><DD>
<DT><A HREF="#lbAL">MAIN OF A SCRIPT</A><DD>
<DT><A HREF="#lbAM">LIST OF WIDGETS</A><DD>
<DT><A HREF="#lbAN">INSTRUCTIONS</A><DD>
<DT><A HREF="#lbAO">ARGUMENTS</A><DD>
<DT><A HREF="#lbAP">FUNCTIONS</A><DD>
<DT><A HREF="#lbAQ">CONDITIONAL LOOPS</A><DD>
<DT><A HREF="#lbAR">COMMANDS</A><DD>
<DT><A HREF="#lbAS">EXAMPLES</A><DD>
<DT><A HREF="#lbAT">A COMMUNICATION PROTOCOL</A><DD>
<DT><A HREF="#lbAU">BUGS</A><DD>
<DT><A HREF="#lbAV">AUTHOR</A><DD>
<DT><A HREF="#lbAW">CONTRIBUTOR</A><DD>
</DL>
<HR>
This document was created by
man2html,
using the manual pages.<BR>
Time: 03:30:50 GMT, July 21, 2006


<?php decoration_window_end(); ?>

<!-- Automatically generated by manpages2php on 21-Jul-2006 -->
