#!/usr/bin/perl -w

# Usage: manpages2php stable ../../../fvwm-2.4.x  # both params are optional

use strict;

unless (`man2html none 2>/dev/null | grep -i 'Content-type: text/html'`) {
	die "You don't have man2html cgi needed for this script\n" .
		"It usually comes together with man(1) on Linux\n";
}

my $scriptDir = ($0 =~ m:(^.*?)/[^/]+$: ? $1 : ".");
my $scriptName = ($0 =~ m:([^/]+)$:, $1);

my $subdir = shift || "unstable";
my $outputDir = $scriptDir;
$outputDir  =   $subdir  if $subdir && $subdir =~ m!^/!;
$outputDir .= "/$subdir" if $subdir && $subdir !~ m!^/!;
my $parentDir = $subdir eq "."? ".": "..";

# currently hardcoded
my %versionInfo = (
	stable   => [ '../../../fvwm-2.4.x', '2.4.x' ],
	unstable => [ '../../../fvwm',       '2.5.x' ],
);

my $branch = exists $versionInfo{$subdir || "none"}? $subdir: "unstable";

my $sourceDir = shift || $versionInfo{$branch}->[0];
my $versionMask = $versionInfo{$branch}->[1];

die "No source directory $sourceDir found\n" unless -d $sourceDir;
die "No output directory $outputDir found\n" unless -d $outputDir;

my $version = `grep '^VERSION = ' '$sourceDir/Makefile' | cut -c11- | tr -d '\n'` || "x.y.z";

# not really used, this template is in file now
my $TEMPLATE_PAGE = q(
	<html>
	<head>
	<title>FVWM Manpage - @topic@</title>
	<style><!--
	# All these may be commented out
	#H1, H2 { margin-left: -0; }
	#BLACKQUOTE { margin-left: +48; }
	#P { margin-left: +24; }
	B { color: #ffffb0; }
	I { color: #b0ffff; }
	--></style>
	</head>
	<body bgcolor="#000000" text="#ffffff"
		link="#a0ffa0" vlink="#c8eec8" alink="#44ff44">
	<center>
	<h1><font color="pink">FVWM Manpage</font></h1>
	</center>

	@body@

	<hr>
	<!-- Automatically generated by @script@ on @date@ -->
	</body>
	</html>
);

# may be in template_index_body.inc later
my $INDEX_BODY = q(
	<h1>Index</h1>
	<hr>
	These pages were last generated on @date@ by @user@,
	from the @vermask@ man pages.<!-- in directory @source@. -->

	<hr>
	Start of man pages in section 1.
	<ul>
	@foreach@ topic in topics
		<li>@link(!@topic@)@
	@endforeach@
	</ul>

	<hr>
	<p>Return to the branch @link(../index)@.
);

my $namespace = {
	date => `date '+%d-%b-%Y' | tr -d '\n'`,
	user => $ENV{USER} || "mr_hacker",
	script => $scriptName,
	source => $sourceDir,
	vermask => $versionMask,
	version => $version,
	branch => $branch,
	parent => $parentDir,
	topic => "*unset-topic*",
};

sub topicToLink ($) {
	my $topic = shift;
	# don't link to itself unless forced using '!'
	return "<u>$topic</u>" if $topic !~ s/^!// && $topic eq $namespace->{topic};
	my $url = $topic;
	$topic =~ s|.*/||;
#	return qq{<a href="./$url.php">$topic</a>};
	return qq{<a href="<?php echo conv_link_target('./$url.php');?>">$topic</a>};
}

sub processTemplate ($) {
	my $text = shift;
	$text =~ s/^\n//s;
#	$text =~ s/^\t//mg;
	$text =~ s/\@foreach\@ (\w+) in (\w+)\n(.*?)\@endforeach\@\n/
		my ($var, $list, $subTemplate) = ($1, $namespace->{$2}, $3);
		join('', map { local $namespace->{$var} = $_;
			processTemplate($subTemplate); } @$list);
	/seg;
	$text =~ s/\@link\((.*?)\)\@/topicToLink(&processTemplate($1))/sge;
	$text =~ s/@(\w+)@/$namespace->{$1}/mge;
	return $text;
}

sub saveFile ($$) {
	my $fileName = shift;
	my $text = shift;
	my $file = "$outputDir/$fileName";
	open(OUT, ">$file") || die "Can't save $file: $!\n";
	print OUT $text;
	close(OUT) || die($!);
}

sub loadFile ($) {
	my $fileName = shift;
	my $file = "$scriptDir/$fileName";
	open(IN, "<$file") || die "Can't open $file: $!\n";
	my $text = join('', <IN>);
	close(IN) || die($!);
	return $text;
}

# ---- main ------------------------------------------------------------------

# currently only support .1 manpages, but it is possible to extend this
my @files = map { chomp($_); $_ } 
	`find $sourceDir -name '*.[1]' -and -not -path "*/autom4te.cache/*"`;
@files = grep !/FvwmOld/, @files;
my @topics = map { m!/([^/]+)\.\d$!; $1 || "internal error" } @files;
my %topic2file = ();
foreach my $i (0 .. @topics - 1) { $topic2file{$topics[$i]} = $files[$i]; };

# sort topics like _we_ want, not just alphabetically
@topics = sort { $a =~ /^fvwm2?$/? -1: $b =~ /^fvwm2?$/? 1: $a cmp $b } @topics;
$namespace->{topics} = [ @topics ];
my $topicRegExp = join("|", reverse @topics);
print "Number of man pages found in $sourceDir: ", scalar @topics, "\n";
print "Output directory is $outputDir\n";

foreach my $topic ("index", @topics) {
	my $phpFile = "$topic.php";
	my $manFile = $topic2file{$topic} || "none.1";
	print "Creating $phpFile\n";
	$namespace->{topic} = $topic;

	my $docbookFile = "";
	my $moduleBase = "";
	if ($topic eq "fvwm") {
		# check for fvwm.man.html
		if (-r $sourceDir . "/doc/fvwm/fvwm.man.html") {
			$docbookFile = $sourceDir . "/doc/fvwm/fvwm.man.html";
			$moduleBase = "../modules/"
		}
	} elsif ($topic ne "index") {
		# check for module documentation
		if (
			-f $sourceDir . "/doc/modules/".$topic.".xml" &&
			-r $sourceDir . "/doc/modules/".$topic.".html") {
			$docbookFile = $sourceDir . "/doc/modules/$topic.html";
		}
	}

	if ($docbookFile ne "") {
		local $_ = `sed -n '/<div class="article"/,/<\\/body>/p' $docbookFile \\
				| iconv -f utf8 -t latin1`;

		s!(href|src)="${moduleBase}images!$1="../../../doc/$subdir/modules/images!g;
		s!(href|src)="$moduleBase!$1="!g;
		s!(href="?)([^/]*?)\.html!$1<?php echo conv_link_target('$2.php');?>!g;
		s!\.\./images!../../../doc/$subdir/images!g;
		s!\.\./commands/([^"]*).html!fvwm.php#$1!g;
		s!(fvwm\.php#)[^"]*#!$1!g;
		s!</body>.*$!!;
		s!(<hr>.*)(<div class="toc">.*?</div>)(.*)<HR>!<a href="#toc">This page contents</a> - <a href="<?php echo conv_link_target('./');?>">Return to main index</a>$1$3<hr /><a name="toc"></a>$2<hr />!s;

		$namespace->{body} = processTemplate($_);
	} else {

		# some fixes
		my $fixCmd = q{perl -pe ' \
		s!^(\.in \+.*)!%blockquote%!i; s!^(\.in -.*)!%/blockquote%!i; \
		s!^(\.Vb.*)!%pre% %blockquote%!i; s!^(\.Ve.*)!%/pre% %/blockquote%!i; \
		s!\\\\fB\\\\\\*\\(--!\\\\fB\\-\\-!; '};
	
		local $_ = $topic eq "index"?
			$INDEX_BODY:
			`cat $manFile | $fixCmd | man2html -p`;
	
		# skip cgi header and footer
		s!^.*?<body>(.*)</body>.*$!$1!si;
	
		# replace some output
		s!\07!!g;
		s!<FONT SIZE="-1">!<FONT>!ig;
		s!<FONT><B>([^<]*?)</B></FONT><B>!<B>$1!ig;
		s!(<A HREF=".*?">)Index!$1This page contents!;
		s!<A HREF=".*?">Return to Main Contents! - <a href="<?php echo conv_link_target('./');?>">Return to main index!;
		s!<A HREF="http://localhost/cgi-bin/man/man2html">man2html</A>!man2html!g;
		s!<A HREF="mailto:StartMenu@!<a name="local-fix:!g;
		s!<A HREF="[^<]*/1\+($topicRegExp)">[^<]*</A>!\@link($1)\@!g;
	
		# correct example blocks
		s!%(/?pre)%!<$1>!g;
		s!%(/?blockquote)%!<$1>!g;
		s!(<pre>)\s+(<blockquote>)\n*!$2$1!sig;
		s!\n*(</pre>)\s+(</blockquote>)!$1$2!sig;
		s!</pre></blockquote>\n<blockquote><pre>!\n\n!sg;
	
		# add links
		s!^((?:<blockquote><pre>)?\s*)($topicRegExp)((?:</pre></blockquote>)?)$!$1\@link($2)\@$3!mg;
		s!(the )($topicRegExp)( manpage)!$1\@link($2)\@$3!g;
		s!(<[Bb]>)($topicRegExp)(</[Bb]>)!$1\@link($2)\@$3!g;
		s!(<[BbIi]>)((?:FVWM|General)::[\w\d:]+)(</[BbIi]>)!$1\@link(../perllib/$2)\@$3!g;
	
		$namespace->{body} = processTemplate($_);
	}
	saveFile(
		$phpFile,
		processTemplate(loadFile("template.php_"))
	);
}
